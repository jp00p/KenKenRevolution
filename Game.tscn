[gd_scene load_steps=14 format=2]

[ext_resource path="res://Rotator.tscn" type="PackedScene" id=1]
[ext_resource path="res://Game.gd" type="Script" id=2]
[ext_resource path="res://Audio.tscn" type="PackedScene" id=3]
[ext_resource path="res://assets/bgs/blue.png" type="Texture" id=4]
[ext_resource path="res://Conductor.tscn" type="PackedScene" id=5]
[ext_resource path="res://assets/particles/particleSmallStar.png" type="Texture" id=6]
[ext_resource path="res://default_theme.tres" type="Theme" id=7]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

const float SAMPLES = 71.0;
const float PI2 = 6.283185307179586476925286766559;

uniform vec2 blur_scale = vec2(1, 0);

float gaussian(float x) {
	float x_squared = x*x;
	float width = 1.0 / sqrt(PI2 * SAMPLES);

	return width * exp((x_squared / (2.0 * SAMPLES)) * -1.0);
}

void fragment() {
	vec2 scale = TEXTURE_PIXEL_SIZE * blur_scale;
	
	float weight = 0.0;
	float total_weight = 0.0;
	vec4 color = vec4(0.0);
	
	for(int i=-int(SAMPLES)/2; i < int(SAMPLES)/2; ++i) {
		weight = gaussian(float(i));
		color += texture(TEXTURE, UV + scale * vec2(float(i))) * weight;
		total_weight += weight;
	}
	
	COLOR = color / total_weight;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/blur_scale = Vector2( 0, 0 )

[sub_resource type="Shader" id=3]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/energy-beams

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;
//render_mode blend_add; // Remove this if you want to use HDR glow instead (use \"Glow\" and \"Outline Glow\" sliders)

uniform int beams = 2; // How many beams the energy field should have

uniform float energy = 3.0; // How much the beams will travel up and down
uniform int roughness : hint_range(1, 10) = 3; // How compact the noise texture will be
uniform int frequency = 10; // Amount of \"ripples\" in the beams

uniform float speed = 1.0; // Animation speed
uniform float thickness : hint_range(0.0, 0.1) = 0.006; // Thickness of the main beam
uniform float outline_thickness : hint_range(0.0, 0.1) = 0.03; //Thickness of the outline color
uniform float beam_difference : hint_range(0.0, 1.0) = 0.0; // The thickness difference between the main beam and the other, if there are more than one beam. The closer to 1 the smaller the thickness difference.

uniform float glow : hint_range(0.0, 3.0) = 0.0; // Use together with WorldEnvironment's Glow feature
uniform float outline_glow : hint_range(0.0, 3.0) = 0.0;

uniform vec4 color : hint_color = vec4(0.91, 1.0, 1.0, 1.0);
uniform vec4 outline_color : hint_color = vec4(0.5, 1.0, 0.96, 1.0);

uniform float progress : hint_range(0.0, 1.0) = 1.0;

uniform float y_offset : hint_range (-0.5, 0.5) = 0.0; // Position of the beam
uniform float fixed_edge_size : hint_range(0.0, 0.5) = 0.05; // How close to the edge should the beam be still before the animatino starts
uniform vec2 noise_scale = vec2(1.0); // If the object (for example the ColorRect or Sprite node) is compressed use this to compensate for the noise texture being compressed.

float random(vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) *
            43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    // Four corners in 2D of a tile
    float a = random(uv_index);
    float b = random(uv_index + vec2(1.0, 0.0));
    float c = random(uv_index + vec2(0.0, 1.0));
    float d = random(uv_index + vec2(1.0, 1.0));

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix(a, b, blur.x) +
            (c - a) * blur.y * (1.0 - blur.x) +
            (d - b) * blur.x * blur.y;
}

float fbm(vec2 uv, float time) {
    int octaves = roughness;
    float amp = 0.01 * energy * progress;
    float freq = float(frequency);
	float value = 0.0;
	
    for(int i = 0; i < octaves; i++) {
        value += amp * noise(freq * vec2(uv.x, uv.y + time));
        amp *= 0.5;
        freq *= 2.0;
    }
    return value;
}

vec4 difference(vec4 base, vec4 blend){
	return abs(base - blend);
}

vec4 bolt(vec2 uv, float time, float i)
{
	// Setup the beam locking to the edges.
	float falloff = smoothstep(0.0, fixed_edge_size, uv.x) * smoothstep(0.0, fixed_edge_size, 1.0 - uv.x);
	
	// Use Fractal Brownian Motion to create a \"cloud texture\" and use Difference blend mode to make the beam
	vec4 clouds = vec4(fbm((uv + vec2(i) ) * noise_scale, time * speed)) * falloff;
	vec4 diff_clouds = difference(clouds, vec4(uv.y - 0.5 + y_offset + (uv.y * falloff * 0.02 * energy * progress)));
	
	// Create a new noise to mask the beams on low \"progress\" values. To make a \"turn-off\" effect more visually interesting.
	vec4 clouds2 = vec4(fbm((uv * 2.0) * noise_scale, time * 1.)) * 5.0;
	diff_clouds += smoothstep(0.0, 0.8, clouds2) * 0.1 * (1.-progress);
	
	// Set thickness of the beams. First beam is the Thickness size and all following beams are sized with beam_difference
	float thickness2 =  1. - ( thickness / (min(i + beam_difference, 1.0) + (1.0-beam_difference))) * progress ;
	vec4 beam = clamp(smoothstep(thickness2, thickness2 + 0.005 * progress, 1.0 - diff_clouds), vec4(0.0), vec4(1.0));
	
	//Set the beam outlines
	vec4 beam_outline;
	float outline = thickness2 - (outline_thickness * progress);
	beam_outline = clamp(smoothstep(outline, outline + 0.04, 1.0 - diff_clouds), 0.0, 1.0);
	beam_outline = clamp(beam_outline - beam, 0.0, 1.0);
	
	// Merge the beam and the outline and return to the fragment function
	return (beam * (color + vec4(glow, glow, glow, 0.))) + (beam_outline * (outline_color + vec4(outline_glow, outline_glow, outline_glow, 0.)));
}

void fragment()
{	
	vec4 beam = vec4(0.0);
	
	for (int i = 0; i < beams; i++){
		beam = max(beam, bolt(UV, TIME, float(i)));
	}
	
	COLOR = beam;
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/beams = 4
shader_param/energy = 5.0
shader_param/roughness = 3
shader_param/frequency = 10
shader_param/speed = 1.0
shader_param/thickness = 0.042
shader_param/outline_thickness = 0.03
shader_param/beam_difference = 0.49
shader_param/glow = 3.0
shader_param/outline_glow = 0.0
shader_param/color = Color( 0.91, 1, 1, 1 )
shader_param/outline_color = Color( 1, 0, 0.772549, 1 )
shader_param/progress = 1.0
shader_param/y_offset = 0.0
shader_param/fixed_edge_size = 0.05
shader_param/noise_scale = Vector2( 1, 1 )

[sub_resource type="Shader" id=5]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.0
shader_param/scanlines_width = 0.25
shader_param/grille_opacity = 0.3
shader_param/resolution = Vector2( 600, 600 )
shader_param/pixelate = false
shader_param/roll = false
shader_param/roll_speed = 0.0
shader_param/roll_size = 0.0
shader_param/roll_variation = 1.8
shader_param/distort_intensity = 0.025
shader_param/noise_opacity = 0.4
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = 0.03
shader_param/brightness = 1.4
shader_param/discolor = true
shader_param/warp_amount = 0.0
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.5

[node name="Game" type="Node2D"]
script = ExtResource( 2 )

[node name="Conductor" parent="." instance=ExtResource( 5 )]

[node name="BG" type="Node2D" parent="."]
position = Vector2( 300, 300 )

[node name="TextureRect" type="TextureRect" parent="BG"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -450.0
margin_top = -450.0
margin_right = 450.0
margin_bottom = 450.0
rect_min_size = Vector2( 900, 900 )
texture = ExtResource( 4 )
expand = true
stretch_mode = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="BG2" type="Node2D" parent="."]
position = Vector2( 300, 300 )

[node name="particleSmallStar" type="Sprite" parent="BG2"]
position = Vector2( -364.891, 195.653 )
texture = ExtResource( 6 )

[node name="particleSmallStar2" type="Sprite" parent="BG2"]
position = Vector2( -205.376, -162.076 )
texture = ExtResource( 6 )

[node name="particleSmallStar3" type="Sprite" parent="BG2"]
position = Vector2( 146.689, 398.586 )
texture = ExtResource( 6 )

[node name="particleSmallStar4" type="Sprite" parent="BG2"]
position = Vector2( 246.74, 134.301 )
texture = ExtResource( 6 )

[node name="particleSmallStar5" type="Sprite" parent="BG2"]
position = Vector2( -47.749, 313.637 )
texture = ExtResource( 6 )

[node name="particleSmallStar6" type="Sprite" parent="BG2"]
position = Vector2( 146.689, -129.984 )
texture = ExtResource( 6 )

[node name="particleSmallStar7" type="Sprite" parent="BG2"]
position = Vector2( 241.076, -299.881 )
texture = ExtResource( 6 )

[node name="particleSmallStar8" type="Sprite" parent="BG2"]
position = Vector2( -105.325, -326.31 )
texture = ExtResource( 6 )

[node name="particleSmallStar9" type="Sprite" parent="BG2"]
position = Vector2( -125.147, 399.53 )
texture = ExtResource( 6 )

[node name="particleSmallStar10" type="Sprite" parent="BG2"]
position = Vector2( 331.688, 36.138 )
texture = ExtResource( 6 )

[node name="particleSmallStar11" type="Sprite" parent="BG2"]
position = Vector2( -267.672, 277.77 )
texture = ExtResource( 6 )

[node name="particleSmallStar12" type="Sprite" parent="BG2"]
position = Vector2( -108.157, -79.9586 )
texture = ExtResource( 6 )

[node name="particleSmallStar13" type="Sprite" parent="BG2"]
position = Vector2( 243.908, 480.703 )
texture = ExtResource( 6 )

[node name="particleSmallStar14" type="Sprite" parent="BG2"]
position = Vector2( 343.959, 216.418 )
texture = ExtResource( 6 )

[node name="particleSmallStar15" type="Sprite" parent="BG2"]
position = Vector2( 49.4701, 395.754 )
texture = ExtResource( 6 )

[node name="particleSmallStar16" type="Sprite" parent="BG2"]
position = Vector2( 243.908, -47.8669 )
texture = ExtResource( 6 )

[node name="particleSmallStar17" type="Sprite" parent="BG2"]
position = Vector2( 338.296, -217.764 )
texture = ExtResource( 6 )

[node name="particleSmallStar18" type="Sprite" parent="BG2"]
position = Vector2( -8.10632, -244.193 )
texture = ExtResource( 6 )

[node name="particleSmallStar19" type="Sprite" parent="BG2"]
position = Vector2( -27.9276, 481.647 )
texture = ExtResource( 6 )

[node name="particleSmallStar20" type="Sprite" parent="BG2"]
position = Vector2( 428.907, 118.255 )
texture = ExtResource( 6 )

[node name="particleSmallStar21" type="Sprite" parent="BG2"]
position = Vector2( -516.216, -61.1541 )
texture = ExtResource( 6 )

[node name="particleSmallStar22" type="Sprite" parent="BG2"]
position = Vector2( -356.701, -418.882 )
texture = ExtResource( 6 )

[node name="particleSmallStar23" type="Sprite" parent="BG2"]
position = Vector2( -4.63623, 141.779 )
texture = ExtResource( 6 )

[node name="particleSmallStar24" type="Sprite" parent="BG2"]
position = Vector2( 95.4146, -122.506 )
texture = ExtResource( 6 )

[node name="particleSmallStar25" type="Sprite" parent="BG2"]
position = Vector2( -199.074, 56.8302 )
texture = ExtResource( 6 )

[node name="particleSmallStar26" type="Sprite" parent="BG2"]
position = Vector2( -4.63623, -386.791 )
texture = ExtResource( 6 )

[node name="particleSmallStar27" type="Sprite" parent="BG2"]
position = Vector2( 89.7512, -556.688 )
texture = ExtResource( 6 )

[node name="particleSmallStar28" type="Sprite" parent="BG2"]
position = Vector2( -256.651, -583.117 )
texture = ExtResource( 6 )

[node name="particleSmallStar29" type="Sprite" parent="BG2"]
position = Vector2( -276.472, 142.723 )
texture = ExtResource( 6 )

[node name="particleSmallStar30" type="Sprite" parent="BG2"]
position = Vector2( 180.363, -220.669 )
texture = ExtResource( 6 )

[node name="Rotator" parent="." instance=ExtResource( 1 )]

[node name="UI" type="CanvasLayer" parent="."]

[node name="MarginContainer" type="MarginContainer" parent="UI"]
anchor_right = 1.0
margin_bottom = 14.0
theme = ExtResource( 7 )
custom_constants/margin_right = 8
custom_constants/margin_top = 10
custom_constants/margin_left = 8
custom_constants/margin_bottom = 8
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HBoxContainer3" type="HBoxContainer" parent="UI/MarginContainer"]
margin_left = 8.0
margin_top = 10.0
margin_right = 592.0
margin_bottom = 28.0
custom_constants/separation = 16
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Measure" type="Label" parent="UI/MarginContainer/HBoxContainer3"]
margin_right = 16.0
margin_bottom = 18.0
text = "0"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Beats" type="Label" parent="UI/MarginContainer/HBoxContainer3"]
margin_left = 32.0
margin_right = 48.0
margin_bottom = 18.0
text = "0"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HBoxContainer" type="HBoxContainer" parent="UI/MarginContainer"]
margin_left = 8.0
margin_top = 10.0
margin_right = 592.0
margin_bottom = 28.0
custom_constants/separation = 100
alignment = 1

[node name="HBoxContainer" type="HBoxContainer" parent="UI/MarginContainer/HBoxContainer"]
margin_left = 68.0
margin_right = 292.0
margin_bottom = 18.0
custom_constants/separation = 16
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="UI/MarginContainer/HBoxContainer/HBoxContainer"]
margin_right = 80.0
margin_bottom = 18.0
text = "Score"

[node name="Label2" type="Label" parent="UI/MarginContainer/HBoxContainer/HBoxContainer"]
margin_left = 96.0
margin_right = 224.0
margin_bottom = 18.0
text = "69696969"

[node name="HBoxContainer2" type="HBoxContainer" parent="UI/MarginContainer/HBoxContainer"]
margin_left = 392.0
margin_right = 516.0
margin_bottom = 18.0
custom_constants/separation = 16
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="UI/MarginContainer/HBoxContainer/HBoxContainer2"]
margin_right = 82.0
margin_bottom = 18.0
text = "Combo"

[node name="Label2" type="Label" parent="UI/MarginContainer/HBoxContainer/HBoxContainer2"]
margin_left = 98.0
margin_right = 124.0
margin_bottom = 18.0
text = "16"

[node name="Bar" type="ColorRect" parent="UI"]
material = SubResource( 4 )
margin_left = -25.0
margin_top = 30.0
margin_right = 625.0
margin_bottom = 50.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AudioPlayer" parent="." instance=ExtResource( 3 )]
position = Vector2( 300, 300 )

[node name="CRTOverlay" type="ColorRect" parent="."]
material = SubResource( 6 )
margin_right = 600.0
margin_bottom = 600.0
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="game_measure" from="." to="Rotator" method="_on_Game_game_measure"]
[connection signal="beat" from="Conductor" to="." method="_on_Conductor_beat"]
[connection signal="measure" from="Conductor" to="." method="_on_Conductor_measure"]
