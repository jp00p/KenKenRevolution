[gd_scene load_steps=11 format=2]

[ext_resource path="res://Arrow.gd" type="Script" id=1]
[ext_resource path="res://assets/elements/arrowRight.png" type="Texture" id=2]
[ext_resource path="res://assets/particles/light_01.png" type="Texture" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/color = Color( 0.588235, 0.984314, 0.780392, 1 )
shader_param/width = 2.0
shader_param/pattern = 1
shader_param/inside = false
shader_param/add_margins = true

[sub_resource type="RectangleShape2D" id=3]
extents = Vector2( 39, 39 )

[sub_resource type="RectangleShape2D" id=4]
extents = Vector2( 20, 20 )

[sub_resource type="RectangleShape2D" id=5]
extents = Vector2( 7, 7 )

[sub_resource type="RectangleShape2D" id=6]
extents = Vector2( 10, 40 )

[sub_resource type="Gradient" id=7]
offsets = PoolRealArray( 0.0108108, 0.491892, 1 )
colors = PoolColorArray( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0 )

[node name="Arrow" type="Node2D"]
script = ExtResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 2 )
z_index = 2
texture = ExtResource( 2 )

[node name="Okay" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Okay"]
shape = SubResource( 3 )

[node name="Good" type="Area2D" parent="."]

[node name="CollisionShape2D2" type="CollisionShape2D" parent="Good"]
shape = SubResource( 4 )

[node name="Perfect" type="Area2D" parent="."]

[node name="CollisionShape2D3" type="CollisionShape2D" parent="Perfect"]
shape = SubResource( 5 )

[node name="Label" type="Label" parent="."]
margin_left = -20.2679
margin_top = 40.9813
margin_right = 19.7321
margin_bottom = 54.9813
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Exit" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Exit"]
position = Vector2( 50.3358, 0 )
shape = SubResource( 6 )

[node name="CaptureParticles" type="CPUParticles2D" parent="."]
modulate = Color( 0.847059, 0.74902, 0.847059, 1 )
z_index = 1
z_as_relative = false
emitting = false
amount = 1
texture = ExtResource( 3 )
gravity = Vector2( 0, 0 )
angular_velocity = 308.57
angle = 720.0
angle_random = 1.0
scale_amount = 0.25
color_ramp = SubResource( 7 )

[connection signal="area_entered" from="Okay" to="." method="_on_Okay_area_entered"]
[connection signal="area_exited" from="Okay" to="." method="_on_Okay_area_exited"]
[connection signal="area_entered" from="Good" to="." method="_on_Good_area_entered"]
[connection signal="area_exited" from="Good" to="." method="_on_Good_area_exited"]
[connection signal="area_entered" from="Perfect" to="." method="_on_Perfect_area_entered"]
[connection signal="area_exited" from="Perfect" to="." method="_on_Perfect_area_exited"]
[connection signal="area_exited" from="Exit" to="." method="_on_Exit_area_exited"]
